/**
 * Nihongo Programming Language Grammar
 *
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

File = _  { ($Statement _)* #Block } EOF

/* Code Layout (Whitespace) */

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / BLOCKCOMMENT / LINECOMMENT )+
S            = [ \t\n\r]
BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !EOL . )* EOL
EOF          = !.
EOL          = ('\r'? '\n') / EOF

/* Token */

"{" = '{' _
"}" = '}' _
"[" = '[' _
"]" = ']' _
"(" = '(' _
")" = ')' _
"=" = '=' !'=' _
"," = ',' _
";" = (';' _)+
":" = ':' _
"." = '.' _

HIRA = [ぁ-ん]*
KATA = [ァ-ヶ]*
KANJI = [㐀-䶵一-龠々〇〻]*

/* Identifier */

Identifier = { (!'は' !'を' .)+ #Name } _

example Identifier 投票者数

/* Statement */

Statement =
    / Let1
    / Let2

Let1 = { name: Identifier 'は' expr: Expression 'である' #LetDecl }
Let2 = { name: Identifier 'を' expr: Expression ('とおく' / 'とする') #LetDecl }

//example Statement 投票者数は3である.

/* Expression */

Expression =
	/ Operator

Operator =
	AndExpr (left:^ { name: { OR } _ right: AndExpr #Infix })*

OR = '||' !'|'

AndExpr =
	EqExpr (left:^ { name: { AND } _ right: EqExpr #Infix })*

AND = '&&' !'&'

EqExpr =
	SumExpr (left:^ { name: { EQ } _ right: SumExpr #Infix })*

EQ =
	/ '==' !'='
	/ '!=' !'='
	/ '<=' !'='
	/ '>=' !'='
	/ '<'  !'<'
	/ '>'  !'>'

SumExpr =
	ProdExpr (left:^ { name: { SUM } _ right: ProdExpr #Infix })*

SUM =
	/ '++'
	/ '+'
	/ '-' !'>'
	/ '|' !'|'

ProdExpr =
	CastExpr (left:^ { name: { PROD } _ right: CastExpr #Infix })*

PROD =
	/ '/'
	/ '*'
	/ '%'
	/ '^'
	/ '<<'
	/ '>>'
	/ '&' !'&'

CastExpr =
//	{ "(" type: Type ")" expr: CastExpr #CastExpr }
	UnaryExpr

UnaryExpr
	= { name: {PRE} _ expr: CastExpr #Unary }
    / SuffixExpr

PRE =
    / '-' !'-'
    / '!'
    / '~'
    / '+'

SuffixExpr =
	Primary (
	    recv:^ { '.' _ name: Identifier "(" $params(Expressions) ")" #MethodExpr }
	    / recv:^ { '.' _ name: Identifier #GetExpr }
	    / recv:^ { "(" $params(Expressions) ")" #ApplyExpr }
	    / recv:^ { "[" $params(Expressions) "]" #IndexExpr }
	)*

Expressions = {
	($Expression)? ( "," $Expression )*
}

/* Primary */

example Primary, Expression (1,2) //
example Primary, Expression (1)
example Primary, Expression () //
example Primary, Expression [1,2,3]
example Primary, Expression { name: 'naruto', age: 17 }
example Primary, Expression {"name": 'naruto', "age": '17'}

Primary =
  /	GroupExpr
  / ListExpr
  / DataExpr
  / Constant
  / Identifier

GroupExpr = { "(" ($Expression ("," $Expression)*)?  ")" #TupleExpr }

ListExpr = { "[" ($Expression ("," $Expression)*)? ","?  "]" #ListExpr }

DataExpr = { "{" ($KeyValue ("," $KeyValue)*) / (':' _) ","? "}" #DataExpr }

KeyValue = {
	name: (Identifier/StringExpr)
	':' _
	value: Expression
}

Constant =
    / TripleExpr
	/ StringExpr
	/ CharExpr
	/ FloatExpr
	/ RationalExpr  // from Racket
	/ IntExpr
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

/* Literal */

example StringExpr, Expression "\n\u1234a\0"
example CharExpr, Expression '\''
example RationalExpr, Expression 4/5
example IntExpr, Expression 0177
example IntExpr, Expression 0b1010_1010
example IntExpr, Expression 0xdeadbeaf
example IntExpr, Expression 0L
example FloatExpr, Expression 1.1e-9
example TrueExpr, Expression true

TripleExpr =
	'\'\'\'' { $(TemplateContent)* #TemplateExpr } '\'\'\''

TemplateContent =
	'${' Expression '}'
	/ { (!'\'\'\'' !'${' .)* #StringExpr }

StringExpr = '"' { STRING_CONTENT* #StringExpr } '"' _
CharExpr = '\'' { CHAR_CONTENT* #CharExpr } '\'' _
STRING_CONTENT = ESCAPE / ![\"\n\\] .
CHAR_CONTENT   = ESCAPE / !['\n\\] .
ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' 'u'+ HEX HEX HEX HEX

RationalExpr = {
	DECIMAL '/' DECIMAL
	#RationalExpr
} _

IntExpr = {
	(DECIMAL / HEXADECIMAL / BINARY / OCTAL)
	#IntExpr
} (left:^ { $right(Var1) #MulExpr })* _

DECIMAL = '0' ![bBxX0-9_] / [1-9] ( '_'* DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
OCTAL = '0' ( '_'* [0-7] )*
DIGIT = [0-9]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #DoubleExpr
} (left:^ { $right(Var1) #MulExpr })* _

Var1  = { [A-Za-z] [0-9]? [']* #NameExpr }  // xy => x * y
      / '(' _ Expression ')'                // 2(n+1) => 2 * (n+1)

FLOAT =
	FRACTION EXPONENT?
    / DIGIT+ EXPONENT

FRACTION =
	!'_' ( '_'* DIGIT )* '.' DIGIT ( '_'* DIGIT )*
    / DIGIT ( '_'* DIGIT )* '.' !'.'

EXPONENT =
	[eE] [+\-]? DIGIT ( '_'* DIGIT )*

TrueExpr  = { 'はい' #TrueExpr } _
FalseExpr = { 'いいえ' #FalseExpr } _
NullExpr  = { [Nn] ('ull' / 'one' / 'il' / 'ULL' / 'othing' ) #NullExpr } _

