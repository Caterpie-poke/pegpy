// python origami

#Block           = "${*}" "\n\t"
#FuncDecl        = "def ${1}(${2:-1}):${indent++}\n\t${@ret(-1)}${indent--}" ","
#FuncExpr        = "lambda ${*}: ${-1}" ","
#FuncMatch       = "if ${*}" "\n\telif "
#FuncCase@1      = True:\n\f\treturn ${1}\b
#FuncCase@2      = ${2}:\n\f\treturn ${1}\b

#Decorator@2     = @${1}\n\t${2}
#Decorator       = "@${1}(${*})\n\t${-1}" ","
#Param           = ${1}
#Return@0        = return
#Return@1        = return ${1}
#LetDecl@2       = ${1} = ${2}
#LetDecl@3       = ${1} = ${3}

#Group           = (${1})
#Infix           = ${@(1)}${2}${@(3)}
#Unary           = ${1}${@(2)}
#GetExpr         = ${@(1)}.${2}
#IndexExpr       = ${@(1)}[${2}]
#ApplyExpr       = "${@(1)}(${2:})" ","
#MethodExpr      = "${@(1)}.${2}(${3:})" ","
//#CastExpr

#IfExpr:(Bool,a,a) -> a = ${1} ? ${2} : ${3}

#TupleExpr       = "(${*})" ","
#ListExpr        = "[${*}]" ","

+@2:(Int,Int) -> Int        = ${1} + ${2}
-@2:(Int,Int) -> Int        = ${1} - ${2}
*@2:(Int,Int) -> Int        = ${1} * ${2}
#MulExpr@2:(Int,Int) -> Int = ${1} * ${2}
/@2:(Int,Int) -> Int        = ${1} / ${2}
%@2:(Int,Int) -> Int        = ${1} % ${2}
==@2:(Int,Int) -> Bool      = ${1} == ${2}
!=@2:(Int,Int) -> Bool      = ${1} != ${2}
<=@2:(Int,Int) -> Bool      = ${1} <= ${2}
>=@2:(Int,Int) -> Bool      = ${1} >= ${2}
<@2:(Int,Int) -> Bool       = ${1} < ${2}
>@2:(Int,Int) -> Bool       = ${1} > ${2}
&@2:(Int,Int) -> Int        = ${1} & ${2}
|@2:(Int,Int) -> Int        = ${1} | ${2}
^@2:(Int,Int) -> Int        = ${1} ^ ${2}
<<@2:(Int,Int) -> Int       = ${1} << ${2}
>>@2:(Int,Int) -> Int       = ${1} >> ${2}

-@1:(Int)->Int              = -${1}
~@1:(Int)->Int              = ~${1}
+@1:(Int)->Int              = ${1}

+@2:(Float,Float) -> Float        = ${1} + ${2}
-@2:(Float,Float) -> Float        = ${1} - ${2}
*@2:(Float,Float) -> Float        = ${1} * ${2}
#MulExpr@2:(Float,Float) -> Float = ${1} + ${2}
/@2:(Float,Float) -> Float        = ${1} / ${2}
==@2:(Float,Float) -> Bool        = ${1} == ${2}
!=@2:(Float,Float) -> Bool        = ${1} != ${2}
<=@2:(Float,Float) -> Bool        = ${1} <= ${2}
>=@2:(Float,Float) -> Bool        = ${1} >= ${2}
<@2:(Float,Float) -> Bool         = ${1} < ${2}
>@2:(Float,Float) -> Bool         = ${1} > ${2}

-@1:(Float)->Float                = -${1}
+@1:(Float)->Float                = ${1}

+@2:(String,String) -> String = ${1} + ${2}
==@2:(String,String) -> String = ${1} == ${2}
!=@2:(String,String) -> String = ${1} != ${2}

||@2:(Bool,Bool) -> Bool = ${1} || ${2}
&&@2:(Bool,Bool) -> Bool = ${1} && ${2}
==@2:(Bool,Bool) -> Bool = ${1} == ${2}
!=@2:(Bool,Bool) -> Bool = ${1} != ${2}
!@1:(Bool)->Bool         = !${1}

#TrueExpr        = True
#FalseExpr       = False
#NullExpr        = None

#StringExpr      = "${s}"
#CharExpr        = '${s}'
#TemplateExpr    = '''${1}'''

Int@1:Float->Int    = int(${1})
Int@1:String->Int   = int(${1})
Int@1:Char->Int     = ord(${1})
Int@1:Bool->Int     = int(${1})

Float@1:Int->Float    = float(${1})
Float@1:String->Float = float(${1})
Float@1:Char->Float   = float(ord(${1}))
Float@1:Bool->Float   = float(${1})

String@1:Int->String   = str(${1})
String@1:Float->String = str(${1})
String@1:Char->String  = ${1}
String@1:Bool->String  = str(${1})

Char@1:Int->Char    = str(${1})
Char@1:Float->Char  = str(${1})
Char@1:String->Char = ${1}
Char@1:Bool->Char   = str(${1})

Bool@1:Int->Bool    = bool(${1})
Bool@1:Float->Bool  = bool(${1})
Bool@1:String->Bool = bool(${1})
Bool@1:Char->Bool   = bool(${1})
//Bool@1:a->Bool    = bool(${1})

Void@1           = ${1}
