/**
 * JSON Grammar
 * ECMA-404 The JSON Data Interchange Standard.
 *
 * Reference: 
 *  http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
 *  http://rfc7159.net/rfc7159
 *
 * Authors:
 *  K. Kuramitsu 
 */

/* This is a JSON object: */

example Object, Value '''
{
     "Image": {
         "Width":  800,
         "Height": 600,
         "Title":  "View from 15th Floor",
         "Thumbnail": {
             "Url":    "http://www.example.com/image/481989943",
             "Height": 125,
             "Width":  100
         },
         "Animated" : false,
         "IDs": [116, 943, 234, 38793]
       }
   }
'''

/* This is a JSON array containing two objects: */

example Array, Value '''
[
     {
        "precision": "zip",
        "Latitude":  37.7668,
        "Longitude": -122.3959,
        "Address":   "",
        "City":      "SAN FRANCISCO",
        "State":     "CA",
        "Zip":       "94107",
        "Country":   "US"
     },
     {
        "precision": "zip",
        "Latitude":  37.371991,
        "Longitude": -122.026020,
        "Address":   "",
        "City":      "SUNNYVALE",
        "State":     "CA",
        "Zip":       "94085",
        "Country":   "US"
     }
   ]
'''

/* Here are three small JSON texts containing only values: */

example String, Value "Hello world!" 
example Number, Value 42
example Number, Value 42.22
example Value true
example INT 42
 
File
	= S* Value S* !.


/* Code Layout, Tokens */

S = [ \t\n\r]
"[" = '[' S*
"]" = ']' S*
"{" = '{' S*
"}" = '}' S*
"," = ',' S*
":" = ':' S*

Expression
	= Value

Value
	= String
	/ Number
	/ Object
	/ Array
	/ Null
	/ True
	/ False
	/ ObjectId

/*
Object
	= { "{" ($_(Member) ("," $_(Member) )* )? "}" #Object }
*/


Object
	= { "{" (member:(Member) ("," member:(Member) )* )? "}" #Object }

Member
	= { key:(String) ":" val:(Value) #Member }

Key
	= String

ObjectId 
        = 'ObjectId' '("' { id: ID #ObjectId } '")'

ID
        = [0-9a-z]+

Array
	= { "["  (val:Value ("," val:Value )* )? "]" #List }


String
	= '"' { str: (('\\"' / '\\\\' / !'"' .)*) #String } '"' S*

True
        = { val: 'true'  #True } S*

False
        = { val: 'false' #False } S*

Null
        = { val: 'null'  #Null } S*

Number
        = { val:('-'? INT FRAC EXP?) #Float } S*
        / { val:('-'? INT) #Int } S*

INT
	= [0-9]+

INT2
	= '0' / [1-9] DIGIT*

DIGIT
	= [0-9]

FRAC
	= '.' DIGIT+

EXP
	= [Ee] ('-' / '+')? DIGIT+
	
